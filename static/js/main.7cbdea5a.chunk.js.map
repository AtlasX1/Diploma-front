{"version":3,"sources":["redux/actions/testActions.js","redux/reducers/testReducer.js","redux/reducers/index.js","redux/api/index.js","config/base.js","redux/sagas/testSaga.js","redux/sagas/index.js","components/header/index.jsx","pages/allDrugs/index.jsx","pages/getDrugs/index.jsx","pages/newDrug/index.jsx","pages/patients/index.jsx","pages/main/index.jsx","App.js","index.js"],"names":["testSuccess","data","type","initialState","testNameData","count","testReducer","state","action","error","rootReducer","combineReducers","api","testApi","a","getTestSaga","testSaga","call","put","takeLatest","saga","all","navButtons","name","link","Header","className","classnames","mobile","map","key","href","AllDrugs","props","id","patientForm","GetDrug","useState","number","symptoms","disease","subDisease","specificsOfPatients","patient","setPatient","updatePatientData","newData","propName","prevData","TextField","label","value","onChange","e","target","onAdd","chip","tmp","push","onDelete","filter","NewDrug","Patients","Main","dispatch","useDispatch","useCallback","testRequest","App","sageMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cbdea5a.chunk.js","sourcesContent":["export const TEST_REQUEST = \"TEST_REQUEST\";\r\nexport const TEST_SUCCESS = \"TEST_SUCCESS\";\r\nexport const TEST_ERROR = \"TEST_ERROR\";\r\n\r\nexport const testRequest = (data) => ({\r\n  type: TEST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const testSuccess = (data) => ({\r\n  type: TEST_SUCCESS,\r\n  data,\r\n});\r\n\r\nexport const testError = (error) => ({\r\n  type: TEST_ERROR,\r\n  error,\r\n});\r\n","import { TEST_REQUEST, TEST_SUCCESS, TEST_ERROR } from \"../actions/testActions\";\r\n\r\nconst initialState = {\r\n  data: {\r\n    testNameData: \"Test\",\r\n  },\r\n  count: 0,\r\n};\r\n\r\nconst testReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TEST_REQUEST:\r\n      return {\r\n        ...state,\r\n        data: action.data,\r\n      };\r\n\r\n    case TEST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        data: action.data,\r\n      };\r\n\r\n    case TEST_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default testReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport testReducer from \"./testReducer\";\r\nconst rootReducer = combineReducers({ testReducer });\r\nexport default rootReducer;\r\n","import axios from \"axios\";\r\nimport { BASE_API_URL } from \"../../config/base\";\r\n\r\nconst api = {\r\n  testApi: async (data) => ({ api: BASE_API_URL, data }),\r\n};\r\n\r\nexport default api;\r\n","export const BASE_API_URL = \"api\";\r\n","import { put, takeLatest, call } from \"redux-saga/effects\";\r\nimport { TEST_REQUEST } from \"../actions/testActions\";\r\nimport { testError, testSuccess } from \"../actions/testActions\";\r\nimport api from \"../api/index.js\";\r\n\r\nfunction* getTestSaga(action) {\r\n  try {\r\n    const data = yield call(api.testApi, action);\r\n    yield put(testSuccess(data));\r\n  } catch (error) {\r\n    yield testError(error);\r\n  }\r\n}\r\n\r\nfunction* testSaga() {\r\n  yield takeLatest(TEST_REQUEST, getTestSaga);\r\n}\r\n\r\nexport default testSaga;\r\n","import { all } from \"redux-saga/effects\";\r\nimport testSaga from \"./testSaga\";\r\nfunction* saga() {\r\n  yield all([testSaga()]);\r\n}\r\n\r\nexport default saga;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport \"./style.scss\";\r\n\r\nconst navButtons = [\r\n  {\r\n    name: \"Підбір ліків\",\r\n    link: \"getDrug\",\r\n  },\r\n  {\r\n    name: \"Всі ліки\",\r\n    link: \"allDrugs\",\r\n  },\r\n  {\r\n    name: \"Додати ліки\",\r\n    link: \"newDrug\",\r\n  },\r\n  {\r\n    name: \"Пацієнти\",\r\n    link: \"patients\",\r\n  },\r\n];\r\n\r\nconst Header = () => {\r\n  const isMobile = false;\r\n  return (\r\n    <div className=\"header\">\r\n      <div className={classnames(\"name\", { mobile: isMobile })}>HealInfo</div>\r\n      <div className=\"buttons\">\r\n        {navButtons.map(({ name, link }) => (\r\n          <a key={link} className=\"headerButton\" href={`#${link}`}>\r\n            {name}\r\n          </a>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport \"./styles.scss\";\r\n\r\nconst AllDrugs = (props) => {\r\n  return (\r\n    <div className=\"section\" id=\"allDrugs\">\r\n      All drugs\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllDrugs;\r\n","import React, { useState } from \"react\";\r\nimport classnames from \"classnames\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst patientForm = [\r\n  { id: \"symptoms\", name: \"Симптоми\" },\r\n  { id: \"disease\", name: \"Хвороба\" },\r\n  { id: \"subDisease\", name: \"Супутні захворювання\" },\r\n  { id: \"specificsOfPatients\", name: \"Особливості пацієнта\" },\r\n];\r\n\r\nconst GetDrug = (props) => {\r\n  const [patient, setPatient] = useState({\r\n    number: 0,\r\n    symptoms: [],\r\n    disease: [],\r\n    subDisease: [],\r\n    specificsOfPatients: [],\r\n  });\r\n\r\n  const updatePatientData = (newData, propName) =>\r\n    setPatient((prevData) => ({ ...prevData, [propName]: newData }));\r\n\r\n  return (\r\n    <div className={classnames(\"section\", \"getDrug\")} id=\"getDrug\">\r\n      <div className=\"setPatient\">\r\n        <div className=\"patientForm\">\r\n          <div className=\"field\">\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Номер\"\r\n              type=\"number\"\r\n              value={patient.number}\r\n              onChange={(e) => updatePatientData(e.target.value, \"number\")}\r\n            />\r\n          </div>\r\n          {patientForm.map(({ id, name }) => (\r\n            <div key={id} className=\"field\">\r\n              <ChipInput\r\n                label={name}\r\n                value={patient[id]}\r\n                onAdd={(chip) => {\r\n                  const tmp = [...patient[id]];\r\n                  tmp.push(chip);\r\n                  updatePatientData(tmp, id);\r\n                }}\r\n                onDelete={(chip) => {\r\n                  const tmp = patient[id].filter((data) => data !== chip);\r\n                  updatePatientData(tmp, id);\r\n                }}\r\n              />\r\n            </div>\r\n          ))}\r\n          <div className=\"submitPatient\">Отримати ліки</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"foundDrugs\">Drugs</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetDrug;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport \"./styles.scss\";\r\n\r\nconst NewDrug = (props) => {\r\n  return (\r\n    <div className=\"section\" id=\"newDrug\">\r\n      new Drug\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewDrug;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport \"./styles.scss\";\r\n\r\nconst Patients = (props) => {\r\n  return (\r\n    <div className=\"section\" id=\"patients\">\r\n      Patients\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","import React, { useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { testRequest } from \"../../redux/actions/testActions\";\r\n\r\nimport { Header } from \"../../components\";\r\nimport AllDrugs from \"../allDrugs\";\r\nimport GetDrugs from \"../getDrugs\";\r\nimport NewDrug from \"../newDrug\";\r\nimport Patients from \"../patients\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Main = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const func = useCallback((data) => dispatch(testRequest(data)), []);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <GetDrugs />\r\n      <AllDrugs />\r\n      <NewDrug />\r\n      <Patients />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\n\nimport { Main } from \"./pages\";\n\nconst App = () => {\n  return (\n    <>\n      <Main />\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"./redux/reducers\";\nimport saga from \"./redux/sagas\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nconst sageMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, applyMiddleware(sageMiddleware));\nsageMiddleware.run(saga);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}