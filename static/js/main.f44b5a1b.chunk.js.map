{"version":3,"sources":["redux/actions/testActions.js","redux/reducers/testReducer.js","redux/actions/drugsActions.js","redux/reducers/drugsReducer.js","redux/reducers/index.js","redux/api/index.js","redux/sagas/testSaga.js","redux/sagas/drugSaga.js","redux/sagas/index.js","components/header/index.jsx","pages/allDrugs/table/index.jsx","pages/allDrugs/index.jsx","pages/getDrugs/index.jsx","pages/main/index.jsx","App.js","index.js"],"names":["testSuccess","data","type","initialState","testNameData","count","testReducer","state","action","error","getAllDrugsSuccess","drugs","isLoading","drugsReducer","tmp","push","rootReducer","combineReducers","api","getDrugs","a","axios","get","BASE_API_URL","createDrug","post","headers","getTestSaga","testSaga","call","testApi","put","takeLatest","drugSaga","console","log","saga","all","navButtons","name","link","Header","className","classnames","mobile","map","i","key","href","useRowStyles","makeStyles","root","width","container","maxHeight","Row","props","row","React","useState","open","setOpen","classes","Fragment","TableRow","TableCell","IconButton","aria-label","size","onClick","component","scope","activeSubstance","align","contraindicationDrug","style","whiteSpace","wordWrap","maxWidth","description","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","TableBody","specificsOfPatients","specific","grams","CollapsibleTable","rowData","TableContainer","Paper","stickyHeader","drugForm","id","AllDrugs","dispatch","useDispatch","addDrug","useCallback","addDrugRequest","drugsData","useSelector","setData","updateData","newData","propName","prevData","changeSpecificData","idx","prop","Grid","item","lg","justify","xs","md","TextField","label","value","onChange","e","target","onAdd","chip","onDelete","filter","multiline","rows","addNewSpecificData","height","patientForm","GetDrug","symptoms","disease","subDisease","patient","setPatient","updatePatientData","sm","Main","func","useEffect","App","sageMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f44b5a1b.chunk.js","sourcesContent":["export const TEST_REQUEST = \"TEST_REQUEST\";\r\nexport const TEST_SUCCESS = \"TEST_SUCCESS\";\r\nexport const TEST_ERROR = \"TEST_ERROR\";\r\n\r\nexport const testRequest = (data) => ({\r\n  type: TEST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const testSuccess = (data) => ({\r\n  type: TEST_SUCCESS,\r\n  data,\r\n});\r\n\r\nexport const testError = (error) => ({\r\n  type: TEST_ERROR,\r\n  error,\r\n});\r\n","import { TEST_REQUEST, TEST_SUCCESS, TEST_ERROR } from \"../actions/testActions\";\r\n\r\nconst initialState = {\r\n  data: {\r\n    testNameData: \"Test\",\r\n  },\r\n  count: 0,\r\n};\r\n\r\nconst testReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TEST_REQUEST:\r\n      return {\r\n        ...state,\r\n        data: action.data,\r\n      };\r\n\r\n    case TEST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        data: action.data,\r\n      };\r\n\r\n    case TEST_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default testReducer;\r\n","export const ADD_DRUG_REQUEST = \"ADD_DRUG_REQUEST\";\r\nexport const ADD_DRUG_SUCCESS = \"ADD_DRUG_SUCCESS\";\r\nexport const ADD_DRUG_ERROR = \"ADD_DRUG_ERROR\";\r\nexport const GET_ALL_DRUGS_REQUEST = \"GET_ALL_DRUGS_REQUEST\";\r\nexport const GET_ALL_DRUGS_SUCCESS = \"GET_ALL_DRUGS_SUCCESS\";\r\nexport const GET_ALL_DRUGS_ERROR = \"GET_ALL_DRUGS_ERROR\";\r\n\r\nexport const addDrugRequest = (data) => ({\r\n  type: ADD_DRUG_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addDrugSuccess = () => ({\r\n  type: ADD_DRUG_SUCCESS,\r\n});\r\n\r\nexport const addDrugError = (error) => ({\r\n  type: ADD_DRUG_ERROR,\r\n  error,\r\n});\r\n\r\nexport const getAllDrugsRequest = () => ({\r\n  type: GET_ALL_DRUGS_REQUEST,\r\n});\r\n\r\nexport const getAllDrugsSuccess = (data) => ({\r\n  type: GET_ALL_DRUGS_SUCCESS,\r\n  data,\r\n});\r\n\r\nexport const getAllDrugsError = (error) => ({\r\n  type: GET_ALL_DRUGS_ERROR,\r\n  error,\r\n});\r\n","import {\r\n  ADD_DRUG_REQUEST,\r\n  ADD_DRUG_SUCCESS,\r\n  ADD_DRUG_ERROR,\r\n  GET_ALL_DRUGS_REQUEST,\r\n  GET_ALL_DRUGS_SUCCESS,\r\n  GET_ALL_DRUGS_ERROR,\r\n} from \"../actions/drugsActions\";\r\n\r\nconst initialState = {\r\n  drugs: [],\r\n  isLoading: false,\r\n  error: \"\",\r\n};\r\n\r\nconst drugsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_DRUG_REQUEST:\r\n      const tmp = [...state.drugs];\r\n      tmp.push(action.data);\r\n      return {\r\n        ...state,\r\n        drugs: [...tmp],\r\n        isLoading: true,\r\n      };\r\n\r\n    case ADD_DRUG_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n\r\n    case ADD_DRUG_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n        isLoading: false,\r\n      };\r\n\r\n    case GET_ALL_DRUGS_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n\r\n    case GET_ALL_DRUGS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        drugs: action.data,\r\n        isLoading: false,\r\n      };\r\n\r\n    case GET_ALL_DRUGS_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n        isLoading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default drugsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport testReducer from \"./testReducer\";\r\nimport drugsReducer from \"./drugsReducer\";\r\nconst rootReducer = combineReducers({ testReducer, drugsReducer });\r\nexport default rootReducer;\r\n","import axios from \"axios\";\r\nimport { BASE_API_URL } from \"../../config/base\";\r\n\r\nconst api = {\r\n  getDrugs: async () => {\r\n    return axios.get(BASE_API_URL + \"/api/drug/\");\r\n  },\r\n  createDrug: async (data) => {\r\n    return axios.post(\r\n      BASE_API_URL + \"/api/drug/create\",\r\n      { data: data.data },\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n  },\r\n};\r\n\r\nexport default api;\r\n","import { put, takeLatest, call } from \"redux-saga/effects\";\r\nimport { TEST_REQUEST } from \"../actions/testActions\";\r\nimport { testError, testSuccess } from \"../actions/testActions\";\r\nimport api from \"../api/index.js\";\r\n\r\nfunction* getTestSaga(action) {\r\n  try {\r\n    const data = yield call(api.testApi, action);\r\n    yield put(testSuccess(data));\r\n  } catch (error) {\r\n    yield testError(error);\r\n  }\r\n}\r\n\r\nfunction* testSaga() {\r\n  yield takeLatest(TEST_REQUEST, getTestSaga);\r\n}\r\n\r\nexport default testSaga;\r\n","import { put, takeLatest, call } from \"redux-saga/effects\";\r\nimport {\r\n  ADD_DRUG_REQUEST,\r\n  GET_ALL_DRUGS_REQUEST,\r\n} from \"../actions/drugsActions\";\r\nimport {\r\n  addDrugError,\r\n  addDrugSuccess,\r\n  getAllDrugsError,\r\n  getAllDrugsSuccess,\r\n} from \"../actions/drugsActions\";\r\nimport api from \"../api/index.js\";\r\n\r\nfunction* createDrug(action) {\r\n  try {\r\n    // yield call(api.createDrug, action);\r\n    yield put(addDrugSuccess());\r\n  } catch (error) {\r\n    yield addDrugError(error);\r\n  }\r\n}\r\n\r\nfunction* getDrugs(action) {\r\n  try {\r\n    const data = yield call(api.getDrugs, action);\r\n    console.log(data);\r\n    yield put(getAllDrugsSuccess(data.data.drugs));\r\n  } catch (error) {\r\n    yield getAllDrugsError(error);\r\n  }\r\n}\r\n\r\nfunction* drugSaga() {\r\n  yield takeLatest(ADD_DRUG_REQUEST, createDrug);\r\n  yield takeLatest(GET_ALL_DRUGS_REQUEST, getDrugs);\r\n}\r\n\r\nexport default drugSaga;\r\n","import { all } from \"redux-saga/effects\";\r\nimport testSaga from \"./testSaga\";\r\nimport drugSaga from \"./drugSaga\";\r\nfunction* saga() {\r\n  yield all([testSaga(), drugSaga()]);\r\n}\r\n\r\nexport default saga;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport \"./style.scss\";\r\n\r\nconst navButtons = [\r\n  {\r\n    name: \"Підбір ліків\",\r\n    link: \"getDrug\",\r\n  },\r\n  {\r\n    name: \"Ліки\",\r\n    link: \"allDrugs\",\r\n  },\r\n\r\n  // {\r\n  //   name: \"Пацієнти\",\r\n  //   link: \"patients\",\r\n  // },\r\n];\r\n\r\nconst Header = () => {\r\n  const isMobile = false;\r\n  return (\r\n    <div className=\"header\">\r\n      <div className={classnames(\"name\", { mobile: isMobile })}>HealInfo</div>\r\n      <div className=\"buttons\">\r\n        {navButtons.map(({ name, link }, i) => (\r\n          <a key={link + i} className=\"headerButton\" href={`#${link}`}>\r\n            {name}\r\n          </a>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\n\r\nconst useRowStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nfunction Row(props) {\r\n  const { row } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useRowStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow className={classes.root}>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          {row.activeSubstance}\r\n        </TableCell>\r\n        <TableCell align=\"right\">{row.contraindicationDrug}</TableCell>\r\n        <TableCell\r\n          align=\"right\"\r\n          style={{\r\n            whiteSpace: \"normal\",\r\n            wordWrap: \"break-word\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n        >\r\n          {row.description}\r\n        </TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Особливості людини\r\n              </Typography>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Назва особливості</TableCell>\r\n                    <TableCell align=\"right\">Опис</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {row.specificsOfPatients.map((specific, i) => (\r\n                    <TableRow key={specific.name + i}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {specific.name}\r\n                      </TableCell>\r\n                      <TableCell>{specific.grams}</TableCell>\r\n                      <TableCell\r\n                        align=\"right\"\r\n                        style={{\r\n                          whiteSpace: \"normal\",\r\n                          wordWrap: \"break-word\",\r\n                          maxWidth: \"100px\",\r\n                        }}\r\n                      >\r\n                        {specific.description}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function CollapsibleTable({ rowData }) {\r\n  const { drugs } = rowData;\r\n  const classes = useRowStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper} className={classes.container}>\r\n      <Table stickyHeader aria-label=\"collapsible table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell />\r\n            <TableCell>Діюча речовина</TableCell>\r\n            <TableCell align=\"right\">Не вживати з</TableCell>\r\n            <TableCell align=\"right\">Опис</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody style={{ maxHeight: \"500px\" }}>\r\n          {drugs.map((row, i) => (\r\n            <Row key={row.name + i} row={row} />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addDrugRequest } from \"../../redux/actions/drugsActions\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport Table from \"./table\";\r\nimport \"./styles.scss\";\r\n\r\nconst drugForm = [{ id: \"activeSubstance\", name: \"Діюча речовина\" }];\r\n\r\nconst AllDrugs = (props) => {\r\n  const dispatch = useDispatch();\r\n  const addDrug = useCallback((data) => dispatch(addDrugRequest(data)), []);\r\n\r\n  const drugsData = useSelector((state) => state.drugsReducer);\r\n\r\n  const [data, setData] = useState({\r\n    activeSubstance: \"\",\r\n    description: \"\",\r\n    specificsOfPatients: [],\r\n    contraindicationDrug: [],\r\n  });\r\n\r\n  const updateData = (newData, propName) =>\r\n    setData((prevData) => ({ ...prevData, [propName]: newData }));\r\n\r\n  const addNewSpecificData = () => {\r\n    const tmp = [...data.specificsOfPatients];\r\n    tmp.push({ name: \"\", grams: \"\", description: \"\" });\r\n    updateData(tmp, \"specificsOfPatients\");\r\n  };\r\n\r\n  const changeSpecificData = (idx, prop, newData) => {\r\n    console.log(idx, prop, newData);\r\n    const tmp = [...data.specificsOfPatients];\r\n    tmp[idx][prop] = newData;\r\n    updateData(tmp, \"specificsOfPatients\");\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      item\r\n      container\r\n      lg={12}\r\n      className=\"section allDrugs\"\r\n      id=\"allDrugs\"\r\n      justify=\"center\"\r\n    >\r\n      <Grid container item lg={6} xs={12} className=\"drugForm\" justify=\"center\">\r\n        <Grid container item md={8} justify=\"center\" className=\"content\">\r\n          {drugForm.map(({ id, name }, i) => (\r\n            <Grid container item xs={12} justify=\"center\" key={id + i}>\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                label={name}\r\n                value={data[id]}\r\n                onChange={(e) => updateData(e.target.value, id)}\r\n              />\r\n            </Grid>\r\n          ))}\r\n          <Grid container item className=\"field\" xs={12} justify=\"center\">\r\n            <ChipInput\r\n              label={\"Не вживати з такими речовинами\"}\r\n              value={data[\"contraindicationDrug\"]}\r\n              onAdd={(chip) => {\r\n                const tmp = [...data[\"contraindicationDrug\"]];\r\n                tmp.push(chip);\r\n                updateData(tmp, \"contraindicationDrug\");\r\n              }}\r\n              onDelete={(chip) => {\r\n                const tmp = data[\"contraindicationDrug\"].filter(\r\n                  (data) => data !== chip\r\n                );\r\n                updateData(tmp, \"contraindicationDrug\");\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid container item xs={12} justify=\"center\">\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Опис\"\r\n              value={data.description}\r\n              multiline\r\n              rows={4}\r\n              onChange={(e) => updateData(e.target.value, \"description\")}\r\n            />\r\n          </Grid>\r\n          <Grid container item xs={12} justify=\"center\">\r\n            Особливості людини\r\n          </Grid>\r\n          <div className=\"addNewSpecific\" onClick={() => addNewSpecificData()}>\r\n            Додати особливість\r\n          </div>\r\n          {data.specificsOfPatients.map((data, idx) => (\r\n            <Grid item container xs={12} lg={12} key={idx}>\r\n              <Grid container item lg={4} xs={12}>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Назва особливості\"\r\n                  value={data.name}\r\n                  onChange={(e) =>\r\n                    changeSpecificData(idx, \"name\", e.target.value)\r\n                  }\r\n                />\r\n              </Grid>\r\n\r\n              <Grid container item lg={4}>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Опис\"\r\n                  value={data.description}\r\n                  multiline\r\n                  rows={4}\r\n                  onChange={(e) =>\r\n                    changeSpecificData(idx, \"description\", e.target.value)\r\n                  }\r\n                />\r\n              </Grid>\r\n              <div style={{ height: \"10px\" }}></div>\r\n            </Grid>\r\n          ))}\r\n\r\n          <Grid\r\n            container\r\n            item\r\n            className=\"addNewSpecific\"\r\n            lg={12}\r\n            onClick={() => addDrug(data)}\r\n          >\r\n            Додати\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container item lg={5} xs={12}>\r\n        <Table rowData={drugsData} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AllDrugs;\r\n","import React, { useState } from \"react\";\r\nimport classnames from \"classnames\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst patientForm = [\r\n  { id: \"symptoms\", name: \"Симптоми\" },\r\n  { id: \"disease\", name: \"Хвороба\" },\r\n  { id: \"subDisease\", name: \"Супутні захворювання\" },\r\n  { id: \"specificsOfPatients\", name: \"Особливості пацієнта\" },\r\n  { id: \"contraindicationDrug\", name: \"Речовини які вже вжиються пацієнтом\" },\r\n];\r\n\r\nconst GetDrug = (props) => {\r\n  const [patient, setPatient] = useState({\r\n    symptoms: [],\r\n    disease: [],\r\n    subDisease: [],\r\n    specificsOfPatients: [],\r\n    contraindicationDrug: [],\r\n  });\r\n\r\n  const updatePatientData = (newData, propName) =>\r\n    setPatient((prevData) => ({ ...prevData, [propName]: newData }));\r\n\r\n  return (\r\n    <Grid container item className=\"section getDrug\" id=\"getDrug\">\r\n      <Grid\r\n        container\r\n        item\r\n        className=\"setPatient\"\r\n        lg={6}\r\n        sm={12}\r\n        justify=\"center\"\r\n      >\r\n        <Grid container item className=\"patientForm\" xs={8} justify=\"center\">\r\n          {patientForm.map(({ id, name }) => (\r\n            <Grid\r\n              container\r\n              item\r\n              key={id}\r\n              className=\"field\"\r\n              xs={12}\r\n              justify=\"center\"\r\n            >\r\n              <ChipInput\r\n                label={name}\r\n                value={patient[id]}\r\n                onAdd={(chip) => {\r\n                  const tmp = [...patient[id]];\r\n                  tmp.push(chip);\r\n                  updatePatientData(tmp, id);\r\n                }}\r\n                onDelete={(chip) => {\r\n                  const tmp = patient[id].filter((data) => data !== chip);\r\n                  updatePatientData(tmp, id);\r\n                }}\r\n              />\r\n            </Grid>\r\n          ))}\r\n          <div className=\"submitPatient\">Отримати ліки</div>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container item lg={6} sm={12} className=\"foundDrugs\">\r\n        Drugs\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default GetDrug;\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getAllDrugsRequest } from \"../../redux/actions/drugsActions\";\r\n\r\nimport { Header } from \"../../components\";\r\nimport AllDrugs from \"../allDrugs\";\r\nimport GetDrugs from \"../getDrugs\";\r\nimport Patients from \"../patients\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Main = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const func = useCallback(() => dispatch(getAllDrugsRequest()), []);\r\n\r\n  useEffect(() => {\r\n    func();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <GetDrugs />\r\n      <AllDrugs />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\n\nimport { Main } from \"./pages\";\n\nconst App = () => {\n  return (\n    <>\n      <Main />\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"./redux/reducers\";\nimport saga from \"./redux/sagas\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nconst sageMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, applyMiddleware(sageMiddleware));\nsageMiddleware.run(saga);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}