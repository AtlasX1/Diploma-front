{"version":3,"sources":["redux/reducers/drugsReducerToolkit.js","redux/api/index.js","redux/middleware/drugsMiddleware.js","redux/reducers/index.js","components/header/index.jsx","pages/allDrugs/table/index.jsx","pages/allDrugs/index.jsx","pages/getDrugs/index.jsx","pages/main/index.jsx","App.js","index.js"],"names":["drugsReducer","createSlice","name","initialState","drugs","isLoading","error","reducers","addDrugRequest","state","action","push","payload","addDrugSuccess","addDrugError","getAllDrugsRequest","getAllDrugsSuccess","console","log","actions","api","getDrugs","a","axios","get","BASE_API_URL","createDrug","data","post","headers","create","store","next","type","then","res","message","dispatch","configureStore","reducer","middleware","getDefaultMiddleware","concat","drugsMiddleware","navButtons","link","Header","className","classnames","mobile","map","i","key","href","useRowStyles","makeStyles","root","width","container","maxHeight","Row","props","row","React","useState","open","setOpen","classes","Fragment","TableRow","TableCell","IconButton","aria-label","size","onClick","component","scope","align","contraindicationDrug","style","whiteSpace","wordWrap","maxWidth","description","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","TableBody","specificsOfPatients","specific","feature","CollapsibleTable","rowData","TableContainer","Paper","stickyHeader","drugForm","id","AllDrugs","useDispatch","addDrug","useCallback","drugsData","useSelector","contraindicationHuman","disease","setData","updateData","newData","propName","prevData","changeSpecificData","idx","prop","tmp","Grid","item","lg","justify","xs","md","TextField","label","value","onChange","e","target","onAdd","chip","onDelete","filter","multiline","rows","symptoms","addNewDiseaseData","changeDiseaseData","tmpDisease","tmpData","dataFilter","height","addNewSpecificData","patientForm","GetDrug","subDisease","patient","setPatient","updatePatientData","sm","Main","func","useEffect","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abf8372b.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nconst initialState = {\r\n  drugs: [],\r\n  isLoading: false,\r\n  error: \"\",\r\n};\r\n\r\nconst drugsReducer = createSlice({\r\n  name: \"drugs\",\r\n  initialState,\r\n\r\n  reducers: {\r\n    addDrugRequest(state, action) {\r\n      state.drugs.push(action.payload);\r\n      state.isLoading = true;\r\n    },\r\n    addDrugSuccess(state, action) {\r\n      state.isLoading = false;\r\n    },\r\n    addDrugError(state, action) {\r\n      state.error = action.payload;\r\n    },\r\n    getAllDrugsRequest(state, action) {\r\n      state.isLoading = true;\r\n    },\r\n    getAllDrugsSuccess(state, action) {\r\n      console.log(action);\r\n      state.drugs = [...action.payload];\r\n      state.isLoading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addDrugRequest, getAllDrugsRequest } = drugsReducer.actions;\r\n\r\nexport default drugsReducer.reducer;\r\n","import axios from \"axios\";\r\nimport { BASE_API_URL } from \"../../config/base\";\r\n\r\nconst api = {\r\n  getDrugs: async () => {\r\n    return axios.get(BASE_API_URL + \"/api/substance/\");\r\n  },\r\n  createDrug: async (data) => {\r\n    console.log(data);\r\n    return axios.post(\r\n      BASE_API_URL + \"/api/substance/create\",\r\n      { ...data },\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n  },\r\n};\r\n\r\nexport default api;\r\n","import api from \"../api\";\r\n\r\nconst create = (store) => (next) => (action) => {\r\n  if (action.type === \"drugs/addDrugRequest\") {\r\n    if (action?.payload) {\r\n      api.createDrug(action.payload).then((res) => {\r\n        if (res.data.message === \"success\") {\r\n          store.dispatch({\r\n            type: \"drugs/addDrugSuccess\",\r\n            payload: res.data.message,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  if (action.type === \"drugs/getAllDrugsRequest\") {\r\n    api.getDrugs(action.payload).then((res) => {\r\n      if (res.data.message === \"success\") {\r\n        store.dispatch({\r\n          type: \"drugs/getAllDrugsSuccess\",\r\n          payload: res.data.drugs,\r\n        });\r\n      }\r\n    });\r\n  }\r\n  next(action);\r\n};\r\n\r\nexport default create;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport drugsReducer from \"./drugsReducerToolkit\";\r\nimport drugsMiddleware from \"../middleware/drugsMiddleware\";\r\nconst store = configureStore({\r\n  reducer: {\r\n    drugs: drugsReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(drugsMiddleware),\r\n});\r\nexport default store;\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport \"./style.scss\";\r\n\r\nconst navButtons = [\r\n  {\r\n    name: \"Підбір ліків\",\r\n    link: \"getDrug\",\r\n  },\r\n  {\r\n    name: \"Ліки\",\r\n    link: \"allDrugs\",\r\n  },\r\n\r\n  // {\r\n  //   name: \"Пацієнти\",\r\n  //   link: \"patients\",\r\n  // },\r\n];\r\n\r\nconst Header = () => {\r\n  const isMobile = false;\r\n  return (\r\n    <div className=\"header\">\r\n      <div className={classnames(\"name\", { mobile: isMobile })}>HealInfo</div>\r\n      <div className=\"buttons\">\r\n        {navButtons.map(({ name, link }, i) => (\r\n          <a key={link + i} className=\"headerButton\" href={`#${link}`}>\r\n            {name}\r\n          </a>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\n\r\nconst useRowStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nfunction Row(props) {\r\n  const { row } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useRowStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow className={classes.root}>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          {row.name}\r\n        </TableCell>\r\n        <TableCell align=\"right\">{row.contraindicationDrug}</TableCell>\r\n        <TableCell\r\n          align=\"right\"\r\n          style={{\r\n            whiteSpace: \"normal\",\r\n            wordWrap: \"break-word\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n        >\r\n          {row.description}\r\n        </TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Особливості людини\r\n              </Typography>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Назва особливості</TableCell>\r\n                    <TableCell align=\"right\">Опис</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {row.specificsOfPatients?.map((specific, i) => (\r\n                    <TableRow key={specific.feature.name + i}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {specific.feature.name}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"right\"\r\n                        style={{\r\n                          whiteSpace: \"normal\",\r\n                          wordWrap: \"break-word\",\r\n                          maxWidth: \"100px\",\r\n                        }}\r\n                      >\r\n                        {specific.description}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function CollapsibleTable(props) {\r\n  const { drugs } = props?.rowData;\r\n  const classes = useRowStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper} className={classes.container}>\r\n      <Table stickyHeader aria-label=\"collapsible table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell />\r\n            <TableCell>Діюча речовина</TableCell>\r\n            <TableCell align=\"right\">Не вживати з</TableCell>\r\n            <TableCell align=\"right\">Опис</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody style={{ maxHeight: \"500px\" }}>\r\n          {drugs.map((row, i) => (\r\n            <Row key={row.name + i} row={row} />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addDrugRequest } from \"../../redux/reducers/drugsReducerToolkit\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport Table from \"./table\";\r\nimport \"./styles.scss\";\r\n\r\nconst drugForm = [{ id: \"name\", name: \"Діюча речовина\" }];\r\n\r\nconst AllDrugs = (props) => {\r\n  const dispatch = useDispatch();\r\n  const addDrug = useCallback((data) => dispatch(addDrugRequest(data)), []);\r\n\r\n  const drugsData = useSelector((state) => state.drugs);\r\n\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    specificsOfPatients: [],\r\n    contraindicationDrug: [],\r\n    contraindicationHuman: [],\r\n    disease: [],\r\n  });\r\n\r\n  const updateData = (newData, propName) =>\r\n    setData((prevData) => ({ ...prevData, [propName]: newData }));\r\n\r\n  const addNewSpecificData = () => {\r\n    const tmp = [...data.specificsOfPatients];\r\n    tmp.push({ name: \"\", description: \"\" });\r\n    updateData(tmp, \"specificsOfPatients\");\r\n  };\r\n\r\n  const addNewDiseaseData = () => {\r\n    const tmp = [...data.disease];\r\n    tmp.push({ name: \"\", symptoms: [] });\r\n    updateData(tmp, \"disease\");\r\n  };\r\n\r\n  const changeDiseaseData = (idx, prop, newData) => {\r\n    const tmp = [...data.disease];\r\n    tmp[idx][prop] = newData;\r\n    updateData(tmp, \"disease\");\r\n  };\r\n\r\n  const changeSpecificData = (idx, prop, newData) => {\r\n    const tmp = [...data.specificsOfPatients];\r\n    tmp[idx][prop] = newData;\r\n    updateData(tmp, \"specificsOfPatients\");\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      item\r\n      container\r\n      lg={12}\r\n      className=\"section allDrugs\"\r\n      id=\"allDrugs\"\r\n      justify=\"center\"\r\n    >\r\n      <Grid container item lg={6} xs={12} className=\"drugForm\" justify=\"center\">\r\n        <Grid container item md={8} justify=\"center\" className=\"content\">\r\n          {drugForm.map(({ id, name }, i) => (\r\n            <Grid container item xs={12} justify=\"center\" key={id + i}>\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                label={name}\r\n                value={data[id]}\r\n                onChange={(e) => updateData(e.target.value, id)}\r\n              />\r\n            </Grid>\r\n          ))}\r\n          <Grid container item className=\"field\" xs={12} justify=\"center\">\r\n            <ChipInput\r\n              label={\"Не вживати з такими речовинами\"}\r\n              value={data[\"contraindicationDrug\"]}\r\n              onAdd={(chip) => {\r\n                const tmp = [...data[\"contraindicationDrug\"]];\r\n                tmp.push(chip);\r\n                updateData(tmp, \"contraindicationDrug\");\r\n              }}\r\n              onDelete={(chip) => {\r\n                const tmp = data[\"contraindicationDrug\"].filter(\r\n                  (data) => data !== chip\r\n                );\r\n                updateData(tmp, \"contraindicationDrug\");\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid container item className=\"field\" xs={12} justify=\"center\">\r\n            <ChipInput\r\n              label={\"Не вживати людям з такими особливостями\"}\r\n              value={data[\"contraindicationHuman\"]}\r\n              onAdd={(chip) => {\r\n                const tmp = [...data[\"contraindicationHuman\"]];\r\n                tmp.push(chip);\r\n                updateData(tmp, \"contraindicationHuman\");\r\n              }}\r\n              onDelete={(chip) => {\r\n                const tmp = data[\"contraindicationHuman\"].filter(\r\n                  (data) => data !== chip\r\n                );\r\n                updateData(tmp, \"contraindicationHuman\");\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid container item xs={12} justify=\"center\">\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Опис\"\r\n              value={data.description}\r\n              multiline\r\n              rows={4}\r\n              onChange={(e) => updateData(e.target.value, \"description\")}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid container item xs={12} justify=\"center\">\r\n            Лікує хвороби\r\n          </Grid>\r\n          <div className=\"addNewSpecific\" onClick={() => addNewDiseaseData()}>\r\n            Додати хворобу\r\n          </div>\r\n          {data.disease.map((disease, idx) => (\r\n            <Grid item container xs={12} lg={12} key={idx}>\r\n              <Grid container item lg={4} xs={12}>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Назва хвороби\"\r\n                  value={disease.name}\r\n                  onChange={(e) =>\r\n                    changeDiseaseData(idx, \"name\", e.target.value)\r\n                  }\r\n                />\r\n              </Grid>\r\n\r\n              <ChipInput\r\n                label={\"Симптоми\"}\r\n                value={disease.symptoms}\r\n                onAdd={(chip) => {\r\n                  const tmpDisease = [...disease.symptoms];\r\n                  tmpDisease.push(chip);\r\n                  const tmpData = [...data.disease];\r\n                  tmpData[idx].symptoms = tmpDisease;\r\n                  updateData(tmpData, \"disease\");\r\n                }}\r\n                onDelete={(chip) => {\r\n                  const tmpDisease = [...disease.symptoms].filter(\r\n                    (dataFilter) => dataFilter !== chip\r\n                  );\r\n                  const tmpData = [...data.disease];\r\n                  tmpData[idx].symptoms = tmpDisease;\r\n                  updateData(tmpData, \"disease\");\r\n                }}\r\n              />\r\n              <div style={{ height: \"10px\" }}></div>\r\n            </Grid>\r\n          ))}\r\n\r\n          <Grid container item xs={12} justify=\"center\">\r\n            Особливості людини\r\n          </Grid>\r\n          <div className=\"addNewSpecific\" onClick={() => addNewSpecificData()}>\r\n            Додати особливість\r\n          </div>\r\n          {data.specificsOfPatients.map((data, idx) => (\r\n            <Grid item container xs={12} lg={12} key={idx}>\r\n              <Grid container item lg={4} xs={12}>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Назва особливості\"\r\n                  value={data.name}\r\n                  onChange={(e) =>\r\n                    changeSpecificData(idx, \"name\", e.target.value)\r\n                  }\r\n                />\r\n              </Grid>\r\n\r\n              <Grid container item lg={4}>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Опис\"\r\n                  value={data.description}\r\n                  multiline\r\n                  rows={4}\r\n                  onChange={(e) =>\r\n                    changeSpecificData(idx, \"description\", e.target.value)\r\n                  }\r\n                />\r\n              </Grid>\r\n              <div style={{ height: \"10px\" }}></div>\r\n            </Grid>\r\n          ))}\r\n\r\n          <Grid\r\n            container\r\n            item\r\n            className=\"addNewSpecific\"\r\n            lg={12}\r\n            onClick={() => addDrug(data)}\r\n          >\r\n            Додати\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container item lg={5} xs={12}>\r\n        <Table rowData={drugsData} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AllDrugs;\r\n","import React, { useState } from \"react\";\r\nimport classnames from \"classnames\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst patientForm = [\r\n  { id: \"symptoms\", name: \"Симптоми\" },\r\n  { id: \"disease\", name: \"Хвороба\" },\r\n  { id: \"subDisease\", name: \"Супутні захворювання\" },\r\n  { id: \"specificsOfPatients\", name: \"Особливості пацієнта\" },\r\n  { id: \"contraindicationDrug\", name: \"Речовини які вже вжиються пацієнтом\" },\r\n];\r\n\r\nconst GetDrug = (props) => {\r\n  const [patient, setPatient] = useState({\r\n    symptoms: [],\r\n    disease: [],\r\n    subDisease: [],\r\n    specificsOfPatients: [],\r\n    contraindicationDrug: [],\r\n  });\r\n\r\n  const updatePatientData = (newData, propName) =>\r\n    setPatient((prevData) => ({ ...prevData, [propName]: newData }));\r\n\r\n  return (\r\n    <Grid container item className=\"section getDrug\" id=\"getDrug\">\r\n      <Grid\r\n        container\r\n        item\r\n        className=\"setPatient\"\r\n        lg={6}\r\n        sm={12}\r\n        justify=\"center\"\r\n      >\r\n        <Grid container item className=\"patientForm\" xs={8} justify=\"center\">\r\n          {patientForm.map(({ id, name }) => (\r\n            <Grid\r\n              container\r\n              item\r\n              key={id}\r\n              className=\"field\"\r\n              xs={12}\r\n              justify=\"center\"\r\n            >\r\n              <ChipInput\r\n                label={name}\r\n                value={patient[id]}\r\n                onAdd={(chip) => {\r\n                  const tmp = [...patient[id]];\r\n                  tmp.push(chip);\r\n                  updatePatientData(tmp, id);\r\n                }}\r\n                onDelete={(chip) => {\r\n                  const tmp = patient[id].filter((data) => data !== chip);\r\n                  updatePatientData(tmp, id);\r\n                }}\r\n              />\r\n            </Grid>\r\n          ))}\r\n          <div className=\"submitPatient\">Отримати ліки</div>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container item lg={6} sm={12} className=\"foundDrugs\">\r\n        Drugs\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default GetDrug;\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// import { getAllDrugsRequest } from \"../../redux/actions/drugsActions\";\r\nimport { getAllDrugsRequest } from \"../../redux/reducers/drugsReducerToolkit\";\r\n\r\nimport { Header } from \"../../components\";\r\nimport AllDrugs from \"../allDrugs\";\r\nimport GetDrugs from \"../getDrugs\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Main = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const func = useCallback(() => dispatch(getAllDrugsRequest()), []);\r\n\r\n  useEffect(() => {\r\n    func();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <GetDrugs />\r\n      <AllDrugs />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\n\nimport { Main } from \"./pages\";\n\nconst App = () => {\n  return (\n    <>\n      <Main />\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/reducers\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}